<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/Manisha/Downloads/New Orders.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="125"/><column_width id="3" width="2528"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,7:mainADDRESS"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="ADDRESS" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="124"/><column index="2" value="300"/><column index="3" value="300"/><column index="4" value="141"/><column index="5" value="124"/><column index="6" value="89"/><column index="7" value="93"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">/* Project Problem Statement:

You are hired by a chain of online retail stores “Reliant retail limited”. 
They provided you with “orders” database and seek answers to the following queries 
as the results from these queries will help the company in making data-driven decisions
that will impact the overall growth of the online retail store.*/

-- PART 1 - Q(1-6)

select * from ADDRESS;
select * from CARTON;
select * from ONLINE_CUSTOMER;
select * from ORDER_HEADER;
select * from ORDER_ITEMS;
select * from PRODUCT;
select * from PRODUCT_CLASS;
select * from SHIPPER;

/*Q1. Write a query to Display the product details 
(product_class_code, product_id, product_desc,product_price,)
as per the following criteria and sort them in descending order of category:

a. If the category is 2050, increase the price by 2000
b. If the category is 2051, increase the price by 500
c. If the category is 2052, increase the price by 600.

Hint: Use case statement. no permanent change in table required.

(60 ROWS) [NOTE: PRODUCT TABLE] */

select * from PRODUCT;

-- Taking the PRODUCT_CLASS_CODE as category

SELECT PRODUCT_CLASS_CODE AS &quot;product_class_code&quot;,
PRODUCT_ID AS &quot;product_id&quot;,
PRODUCT_DESC AS &quot;product_desc&quot;,
PRODUCT_PRICE AS &quot;product_price&quot;,
CASE PRODUCT_CLASS_CODE
 WHEN 2050 THEN PRODUCT_PRICE+2000 -- increase the price by 2000
 WHEN 2051 THEN PRODUCT_PRICE+500 -- increase the price by 500
 WHEN 2052 THEN PRODUCT_PRICE+600 -- increase the price by 600
ELSE
PRODUCT_PRICE
END AS &quot;final calculated price&quot; FROM PRODUCT ORDER BY PRODUCT_CLASS_CODE DESC; -- descending order of category

/* Q2.Write a query to display (product_class_desc, product_id, product_desc,product_quantity_avail ) 
and Show inventory status of products as below as per their available quantity:

a. For Electronics and Computer categories, 
if available quantity is &lt;= 10, show 'Low stock', 11 &lt;= qty &lt;= 30, show 'In stock', &gt;= 31, show 'Enough stock'

b. For Stationery and Clothes categories,
if qty &lt;= 20, show 'Low stock', 21 &lt;= qty &lt;= 80, show 'In stock', &gt;= 81, show 'Enough stock'

c. Rest of the categories, 
if qty &lt;= 15 – 'Low Stock', 16 &lt;= qty &lt;= 50 – 'In Stock', &gt;= 51 – 'Enough stock'

For all categories, if available quantity is 0, show 'Out of stock'.

Hint: Use case statement.
(60 ROWS) [NOTE: TABLES TO BE USED – product, product_class] */

select * from PRODUCT;
select * from PRODUCT_CLASS;

SELECT * FROM PRODUCT_CLASS WHERE PRODUCT_CLASS_DESC = &quot;Electronics&quot;; -- 2050
SELECT * FROM PRODUCT_CLASS WHERE PRODUCT_CLASS_DESC = &quot;Computer&quot;; -- 2053
SELECT * FROM PRODUCT_CLASS WHERE PRODUCT_CLASS_DESC = &quot;Stationery&quot; -- 2056
SELECT * FROM PRODUCT_CLASS WHERE PRODUCT_CLASS_DESC = &quot;Clothes&quot; -- 2052


SELECT pc.PRODUCT_CLASS_CODE AS &quot;product_class_desc&quot;,
p.PRODUCT_ID AS &quot;product_id&quot;,
p.PRODUCT_DESC AS &quot;product_desc&quot;,
p.PRODUCT_QUANTITY_AVAIL AS &quot;product_quantity_avail&quot;,
CASE
 WHEN pc.PRODUCT_CLASS_CODE IN(2050,2053) THEN -- For Electronics and Computer categories
 CASE
  WHEN p.PRODUCT_QUANTITY_AVAIL = 0 THEN &quot;Out of stock&quot; -- out of stock condition
  WHEN p.PRODUCT_QUANTITY_AVAIL &lt;= 10 THEN &quot;Low stock&quot;
  WHEN (p.PRODUCT_QUANTITY_AVAIL &gt;= 11 AND p.PRODUCT_QUANTITY_AVAIL &lt;= 30) THEN &quot;In stock&quot;
  WHEN p.PRODUCT_QUANTITY_AVAIL &gt;= 31 THEN &quot;Enough stock&quot;
 END
 WHEN pc.PRODUCT_CLASS_CODE IN(2052,2056) THEN -- For Stationery and Clothes categories
 CASE
  WHEN p.PRODUCT_QUANTITY_AVAIL = 0 THEN &quot;Out of stock&quot;
  WHEN p.PRODUCT_QUANTITY_AVAIL &lt;= 20 THEN &quot;Low stock&quot;
  WHEN (p.PRODUCT_QUANTITY_AVAIL &gt;= 21 AND p.PRODUCT_QUANTITY_AVAIL &lt;= 80) THEN &quot;In stock&quot;
  WHEN p.PRODUCT_QUANTITY_AVAIL &gt;= 81 THEN &quot;Enough stock&quot;
 END
ELSE --  Rest of the categories
 CASE
  WHEN p.PRODUCT_QUANTITY_AVAIL = 0 THEN &quot;Out of stock&quot;
  WHEN p.PRODUCT_QUANTITY_AVAIL &lt;= 15 THEN &quot;Low stock&quot;
  WHEN (p.PRODUCT_QUANTITY_AVAIL &gt;= 16 AND p.PRODUCT_QUANTITY_AVAIL &lt;= 50) THEN &quot;In stock&quot;
  WHEN p.PRODUCT_QUANTITY_AVAIL &gt;= 51 THEN &quot;Enough stock&quot;
 END
END AS &quot;inventory status&quot;
FROM PRODUCT p
INNER JOIN PRODUCT_CLASS pc
ON p.PRODUCT_CLASS_CODE = pc.PRODUCT_CLASS_CODE
ORDER BY p.PRODUCT_CLASS_CODE,p.PRODUCT_QUANTITY_AVAIL DESC;


/* Q3. Write a query to Show the count of cities in all countries 
other than USA &amp; MALAYSIA, 
with morethan 1 city, 
in the descending order of CITIES.

(2 rows) [NOTE: ADDRESS TABLE, Do not use Distinct] */

select * from ADDRESS;

SELECT COUNT(CITY) AS &quot;Count of cities&quot;, -- count of cities 
COUNTRY AS &quot;Country&quot;
FROM ADDRESS
GROUP BY COUNTRY -- in all countries
HAVING COUNTRY NOT IN (&quot;USA&quot;, &quot;Malaysia&quot;) AND COUNT(CITY) &gt; 1 -- other than USA &amp; MALAYSIA and country with morethan 1 city,
ORDER BY &quot;Count of cities&quot; DESC; -- the descending order of CITIES.

/* Q4.Write a query to display the 
customer_id,customer full name ,city,pincode,
and order details (order id,order date, product class desc, product desc, subtotal(product_quantity * product_price)) 
for orders shipped to cities whose pin codes do not have any 0s in them.
Sort the output on customer name, order date and subtotal. 

(52 ROWS)
[NOTE: TABLE TO BE USED - online_customer, address, order_header, order_items, product, product_class] */

select * from ONLINE_CUSTOMER;
select * from ADDRESS;
select * from ORDER_HEADER;
select * from ORDER_ITEMS;
select * from PRODUCT;
select * from PRODUCT_CLASS;

SELECT OC.CUSTOMER_ID AS &quot;customer_id&quot;,
OC.CUSTOMER_FNAME ||' '|| OC.CUSTOMER_LNAME AS &quot;customer full name&quot;,
A.CITY AS &quot;city&quot;,
A.PINCODE AS &quot;pincode&quot;,
OH.ORDER_ID AS &quot;order id&quot;,
OH.ORDER_DATE AS &quot;order date&quot;,
PC.PRODUCT_CLASS_DESC AS &quot;product class desc&quot;,
P.PRODUCT_DESC AS &quot;product desc&quot;,
-- P.PRODUCT_PRICE AS &quot;product_price&quot;,
-- OI.PRODUCT_QUANTITY AS &quot;product_quantity&quot;,
(P.PRODUCT_PRICE * OI.PRODUCT_QUANTITY) AS &quot;subtotal&quot; -- subtotal(product_quantity * product_price)
FROM
ONLINE_CUSTOMER OC
INNER JOIN ADDRESS A ON OC.ADDRESS_ID = A.ADDRESS_ID -- to fetch city and pincode details
INNER JOIN ORDER_HEADER OH ON OH.CUSTOMER_ID = OC.CUSTOMER_ID -- to fetch order_id, order_date
INNER JOIN ORDER_ITEMS OI ON OI.ORDER_ID = OH.ORDER_ID  -- to get the product order quantity
INNER JOIN PRODUCT P ON P.PRODUCT_ID = OI.PRODUCT_ID -- to get price of the product
INNER JOIN PRODUCT_CLASS PC ON PC.PRODUCT_CLASS_CODE = P.PRODUCT_CLASS_CODE  -- to get the product description
WHERE
OH.ORDER_STATUS = &quot;Shipped&quot; AND A.PINCODE NOT LIKE '%0%' -- orders shipped to cities whose pin codes do not have any 0's in them.
ORDER BY OC.CUSTOMER_FNAME,subtotal; -- Sort the output on customer name, order date and subtotal. 


/* 5. Write a Query to display 
product id,product description,totalquantity(sum(product quantity)
for an item which has been bought maximum no. of times along with product id 201.

(USE SUB-QUERY) (1 ROW) [NOTE: ORDER_ITEMS TABLE, PRODUCT TABLE] */

select * from ORDER_ITEMS;
select * from PRODUCT;

SELECT OI.PRODUCT_ID AS &quot;product id&quot;, -- searches for the PRODUCT_ID along with PRODUCT_ID = 201
P.PRODUCT_DESC AS &quot;product description&quot;, -- gets product descriprion
SUM(OI.PRODUCT_QUANTITY) AS &quot;totalquantity&quot; -- totalquantity(sum(product quantity)
FROM ORDER_ITEMS OI 
INNER JOIN PRODUCT P ON P.PRODUCT_ID = OI.PRODUCT_ID -- joining product table to fetch description
WHERE OI.ORDER_ID IN
(SELECT DISTINCT ORDER_ID FROM ORDER_ITEMS A WHERE PRODUCT_ID = 201) --  pulls out all the orders having PRODUCT_ID = 201
AND OI.PRODUCT_ID &lt;&gt; 201
GROUP BY OI.PRODUCT_ID
ORDER BY &quot;totalquantity&quot; DESC
LIMIT 1; -- limits output to 1 row

/* 6. Write a query to display the 
customer_id,customer name, email and order details (order id,product desc,product qty, subtotal(product_quantity * product_price)) 
for all customers even if they have not ordered any item.
 ygfv 
(225 ROWS)
[NOTE: TABLE TO BE USED - online_customer, order_header, order_items, product] */
 
select * from ONLINE_CUSTOMER;
select * from ORDER_HEADER;
select * from ORDER_ITEMS;
select * from PRODUCT; 

SELECT oc.CUSTOMER_ID AS &quot;customer_id&quot;,
oc.CUSTOMER_FNAME||' '||oc.CUSTOMER_LNAME AS &quot;customer name&quot;,
oc.CUSTOMER_EMAIL AS &quot;email&quot;,
O.ORDER_ID AS &quot;order id&quot;,
P.PRODUCT_DESC AS &quot;product desc&quot;,
OI.PRODUCT_QUANTITY AS &quot;product qty&quot;,
(OI.PRODUCT_QUANTITY * P.PRODUCT_PRICE) AS &quot;subtotal&quot; --  subtotal(product_quantity * product_price))
FROM ONLINE_CUSTOMER oc
LEFT JOIN ORDER_HEADER O ON oc.CUSTOMER_ID = O.CUSTOMER_ID -- to fetch the ORDER_ID and connect product and customer
LEFT JOIN ORDER_ITEMS OI ON O.ORDER_ID = OI.ORDER_ID -- for product qty
LEFT JOIN PRODUCT P ON OI.PRODUCT_ID = P.PRODUCT_ID -- for product desc &amp; price
ORDER BY CUSTOMER_ID, &quot;product qty&quot; DESC;</sql><current_tab id="0"/></tab_sql></sqlb_project>
